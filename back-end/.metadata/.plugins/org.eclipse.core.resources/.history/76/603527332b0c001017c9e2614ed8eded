package tech.calendar.api.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;
import tech.calendar.api.database.Database;
import tech.calendar.api.entity.*;

@RestController
@RequestMapping("/clientes") //Url base do endpoint
public class ClientController {
	
	private Database database;
	
	public ClientController(@Value("${spring.datasource.username}") String user, 
			@Value("${spring.datasource.password}") String key) {
		database = new Database("jdbc:mysql://localhost:3306/sistema_agenda", user, key);
	}
	
	private ResponseEntity<List<Client>> getClients(String sql){
		List<Client> list = new LinkedList<>();
		try(Connection conn = database.connect();
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(sql);){
			while(rs.next()) {
				int id = rs.getInt("id");
				String name = rs.getString("nome");
				String cpf = rs.getString("cpf");
				String date_birth = rs.getString("data_nascimento");
				String address = rs.getString("endereco");
				list.add(new Client(id, name, cpf, date_birth, address));
			}
			return ResponseEntity.ok(list);
		}
		catch(SQLException e) {
			printError(e);
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
		}
	}
	
	private void printError(SQLException e) {
		System.out.println("Falha ao interagir com o banco de dados: " + e.getMessage());
	}
	
	@GetMapping
	public ResponseEntity<List<Client>> getListClients(){ //endpoint que retorna a lista completa de clientes
		String sql = "SELECT * FROM Cliente;";
		return getClients(sql);
	}
	
	@GetMapping("/nome/{name}")
	public ResponseEntity<List<Client>> getClientByName(@PathVariable String name){
		String sql = "SELECT * FROM Cliente WHERE nome LIKE \"%" + name + "%\";";
		return getClients(sql);
	}
	
	@GetMapping("/cpf/{cpf}")
	public ResponseEntity<List<Client>> getClientByCPF(@PathVariable String cpf){
		String sql = "SELECT * FROM Cliente WHERE cpf =\"" + cpf + "\";";
		return getClients(sql);
	}
	
	@PostMapping
	public ResponseEntity<String> insertClient(@RequestBody Client client){
		String sql = "INSERT INTO Cliente (nome, cpf, data_nascimento, endereco) VALUES " +
						"(" + client.getName() + ", " + client.getCPF() + ", " +
							client.getDateBirth() + ", " + client.getAddress() + ");";
		return this.executeUpdateSQL(sql);
	}
	
	private ResponseEntity<String> executeUpdateSQL(String sql){ 
		try(Connection conn = database.connect();
			Statement stmt = conn.createStatement();){
			int rowsAffected = stmt.executeUpdate(sql);
			String response;
			if(rowsAffected > 0) {
				response = "Operação bem sucedida!";
				return ResponseEntity.ok(response);
			}
			else {
				response = "Não foi possível realizar a operação.";
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
			}
		}
		catch(SQLException e) {
			printError(e);
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
		}
	}
	
	@PutMapping("/{id}")
	public ResponseEntity<String> updateClient(@PathVariable int id, @RequestBody Client client){
		String sql = "UPDATE Cliente SET nome = " + client.getName() + ", cpf = " + client.getCPF() +
						", data_nascimento = " + client.getDateBirth() + ", endereco = " + client.getAddress()
						+ " WHERE id = " + id + ";";
		return this.executeUpdateSQL(sql);
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<String> deleteClient(@PathVariable int id){
		String sql = "DELETE FROM Cliente WHERE id = " + id + ";";
		return this.executeUpdateSQL(sql);
	}
	
}
